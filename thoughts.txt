Questions
- impl/_GotmUserLocal seems useless? Ask for clarification, or maybe look into a better implementation.
- Discuss the usage of GotmMark. It is strictly just to upvote and downvote GotmContent as of this moment. What future usage can this class hold? Would it be better to move the upvote and downvote functionality inside the GotmContent itself? What possible other types and targets can it include?
- Do I need _impl in GotmUser and in other end-user classes? Is there no better way to store private variables in objects? Currently there are no "private" vars or functions. Maybe we can use get/set meta as well? (not on the script but on the instanced objects)

Notes:
- All functions have been sorted alphabetically for legibility reasons, this is due to the new documentation generation in Godot 4 putting everything alphabetically.
- #warnings-disable does not work. They seemed to be in favor of removing: https://github.com/godotengine/godot-proposals/issues/753#issuecomment-619533712 ... perhaps for the better?
- const dictionaries/arrays used to be shallow in Godot 3. This plugin utilized that fact to make the equivilant of "static variables" (i.e. _global in _GotmUtility). That is no longer the case: https://github.com/godotengine/godot/pull/71051. Using get/set meta instead as a hacky workaround...

Suggestions:
- move some _GotmScore functions to _GotmLeaderboard i.e. get_counts, get_rank, list, list_by_rank, etc. I think it is better to decouple as much as possible.
- _GotmScore.get_implementation() change return type to string (or maybe named enum :eyes: :eyes: *new feature in G4*) to avoid unnecesary instantiation in the return. Instantiation is not needed because all functions are static, Editor throws warnings (no errors) about using a static function with an instanced variable.
    - Same for _GotmMark
- implement Godot's new in-editor documentation feature wherever possible